/* 
 * LineFollower.nxc
 * Follow a line using a PID algorithm.
 */
#define LIGHT_PORT S1
#define LIGHT_VALUE SENSOR_1
#define TARGET_POWER 75.0
#define DT 0.0008
#define PC 0.5

/* Logging */
#include "Logger.nxc"
#define LOG_FILE "lf.log"

/* Calibration variables */
int lowest = 2000;
int highest = -2000;
int calibration_sem = 0;

/* 
 * PID constants
 * We use Ziegler-Nichols to tune the PID.  
 * 1) Adjust k_p until the system oscillates but follows the
 * line. This gives k_c. Measure oscillation time P_c and loop time DT.
 * 2) Set k_p = 0.60 * k_c,
 *        k_i = 2.0 * k_p * DT / P_c,
 *        k_d = k_p * P_c / (8.0 * DT)
 */
float kp = 0.192;
float ki = 0.00034;
float kd = 0.0;

/* Parameters for 50% target power. */
/* float kp = 0.18; */
/* float ki = 0.0004; */
/* float kd = 0.0035; */


byte run_sem = 0;

inline int min(int v1, int v2) {
     return (v1 < v2) ? v1 : v2;
}

inline int max(int v1, int v2) {
     return (v1 > v2) ? v1 : v2;
}

task read_light_sensor() {
     int sensor_value = 0;

     while (calibration_sem == 1) {
	  sensor_value = LIGHT_VALUE;
	  lowest = min(lowest, sensor_value);
	  highest = max(highest, sensor_value);
     }
}

void auto_calibrate() {
     OnFwdSync(OUT_AC, 100, 100);
     Wait(MS_500);

     calibration_sem = 1;
     StartTask(read_light_sensor);
     OnFwdSync(OUT_AC, 25, -100);
     Wait(4500);
     calibration_sem = 0;

     OnFwdSync(OUT_AC, 100, 100);
     Wait(MS_400);
     Off(OUT_AC);
     Float(OUT_AC);
}

void manual_calibrate() {
     TextOut(0, LCD_LINE4, "< to end.");

     while (!ButtonPressed(BTNLEFT, false)) {
	  int sensor_value = LIGHT_VALUE;
	  lowest = min(lowest, sensor_value);
	  highest = max(highest, sensor_value);
	  NumOut(0, LCD_LINE1, lowest);
	  NumOut(0, LCD_LINE2, sensor_value);
	  NumOut(0, LCD_LINE3, highest);
     }

     TextOut(0, LCD_LINE1, " ", DRAW_OPT_CLEAR_WHOLE_SCREEN);
}

task adjust_kp() {
     bool leftPressed = false;
     bool rightPressed = false;

     string s = "kp = " + FormatNum("%4.2f", kp);
     TextOut(0, LCD_LINE1, s);

     while (run_sem == 1) {
	  if (ButtonPressed(BTNLEFT, false)) {
	       if (!leftPressed) {
		    leftPressed = true;
		    kp -= 0.01;
	       }
	  } else {
	       leftPressed = false;
	  }

	  if (ButtonPressed(BTNRIGHT, false)) {
	       if (!rightPressed) {
		    rightPressed = true;
		    kp += 0.01;
	       }
	  } else {
	       rightPressed = false;
	  }

	  if (leftPressed || rightPressed) {
	       s = "kp = " + FormatNum("%4.2f", kp);
	       TextOut(0, LCD_LINE1, s);
	  }
     }
}

task main() {
     logging = true;
     set_log_size(32767);
     open_log(LOG_FILE);

     SetSensorType(LIGHT_PORT, SENSOR_TYPE_LIGHT_ACTIVE);
     SetSensorMode(LIGHT_PORT, SENSOR_MODE_RAW);
     ResetSensor(LIGHT_PORT);

     /* Manual calibration */
     write_log_string("manual calibration");
     manual_calibrate();
     write_log_value_2("l, h = ", lowest, highest);
     Wait(250);

     /* Find the set point and show it. */
     int set_point = (lowest + highest) / 2;
     int tp = TARGET_POWER;

     /* Log the PID constant values. */
     write_log_value_3("kp, ki, kd = ", kp, ki, kd);

     /* Loop time calculation */
     unsigned long start_tick;
     unsigned long loops = 0;

     /* Main driving loop */
     int integral = 0;
     int last_error = 0;
     int derivative = 0;

     /* Start the k_p adjusting task. */
     run_sem = 1;
     StartTask(adjust_kp);

     start_tick = CurrentTick();
     while (!ButtonPressed(BTNCENTER, false)) {
	  int sensor_value = LIGHT_VALUE;
	  int error = sensor_value - set_point;
	  integral = integral + error;
	  derivative = error - last_error;
	  float turn = kp * error + ki * integral + kd * derivative;

	  int power_a = tp - turn;
	  int power_c = tp + turn;
	  OnFwd(OUT_A, power_a);
	  OnFwd(OUT_C, power_c);

	  last_error = error;
	  ++loops;

	  if (loops == 1000) {
	       unsigned long ticks = CurrentTick() - start_tick;
	       write_log_value_2("ticks, loops = ", ticks, loops);
	  }
     }
     
     run_sem = 0;

     Off(OUT_AC);
     close_log();
     Wait(SEC_5);
}

